[{"body":"This is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"This is a placeholder page that shows you how to use this template …","ref":"/blog_2/hugo/","title":"Hugo로 블로그 만들기"},{"body":"class 형일 때만 life cycle 사용이 가능하다. 1.asdfasdf dkfajsdkf asdlkjfaksdf\n2. asdklfjksldjf sdasdfasdfadfdfsadfasdfffffffffdsa\nsadfasdf a sdafdfasdf sdaf sdf d\n//asdfsdfasd\nIntegrating REST APIs into CI / CD pipelines This is API information provided to use apptest.ai in connection with CI(Continuous Integration) tools. You can use apptest.ai through test set creation, test status view, and test result view API.\n1. [POST] Run New Testset Run a New Testset. (Testset is group of unit Tests)\nSome Options of the new test run follow the configuration information stored in the project.\n   key type Description Required     app_file File Target APP File to Test Required    ","excerpt":"class 형일 때만 life cycle 사용이 가능하다. 1.asdfasdf dkfajsdkf asdlkjfaksdf\n2. …","ref":"/blog_2/en/react/1.-lifecycle/","title":"1. Life Cycle"},{"body":"Pramater When you make function,\n","excerpt":"Pramater When you make function,\n","ref":"/blog_2/en/javascript/1.-paramter/","title":"1. What is parameter"},{"body":"If ","excerpt":"If ","ref":"/blog_2/en/javascript/2.-if/","title":"2. If"},{"body":"0. Github에서 repository를 만든 다음 clone을 받는다. 1. hugo new site 폴더이름 터미널에서 clone 받은 디렉토리로 이동해 hugo new site 이름 명령어를 입력하면 hugo site가 생성된다.\n//예시 (이름을 blog로 지었다.) hugo new site blog 만들고 난 후 congratulations 라고 적혀있는 걸 볼 수 있다.\n2. 테마를 받아준다.   해당 폴더로 가서 git 초기화 git init\n  hugo theme 선택하고 github 주소 복사하기\n만약 css 수정할거라면 테마 github 주소 folk 한 다음 folk한 주소 복사하기\n  submodule로 주소 추가하기 \ngit submodule add 테마주소 themes/테마이름\n이렇게 하면 blog 폴더 안에 있는 themes 폴더에 내가 선택한 테마가 clone 되고 submodule에 추가 된다.\n  //예시 // 폴더 들어가기 cd blog //git 초기화 하기 git init //submodule추가하기 (나는 docsy라는 테마를 선택했다.) git submodule add https://github.com/ceres1105/docsy.git themes/docsy echo 'theme = \"테마이름\"' \u003e\u003e config.toml 나는 docsy라는 테마를 사용했는데, 이 테마는 scss를 사용하기도 하고 config.toml에 신경쓸 것이 많다. 처음 만든다면 일단 quickstart 에서 예시로 나온 ananke 테마로 먼저 연습해보길 바란다.\n3. contents 만들기 hugo new 폴더이름/파일이름.md \n주의할 점은 위의 명령어를 config.toml이 있는 최상단 폴더에서 입력해야 한다.\ncontent 폴더 하위에 폴더가 생성되고 그 하위에 파일이 생성된다.\n만약 hugo new 파일이름.md 명령어를 입력하면 content 폴더 하위에 파일이 생성된다.\n//예시 // 하위 폴더에 있을 경우 상위 폴더인 blog 폴더로 와야한다. cd .. // contents 생성. contents폴더 하위에 React폴더를 만들고 Life_Cycle이라는 파일을 만들었다. //만약 React라는 폴더가 이미 존재했다면 해당 폴더 안에 Life_Cycle 파일이 만들어 졌을 것이다. //md 파일은 마크업언어로 작성된 파일이다. hugo new React/Life_Cycle.md Plus 알고 있겠지만,\n파일 내부를 작성하고 싶다면 code .를 입력해 VS Code 등을 열어서 내용을 작성해도 되고\nvi 파일명으로 입력창을 열어서 내용을 작성해도 된다.\nvi 입력창은 i를 누른다음 내용을 수정할 수 있다.\n수정을 다 한후에는 Esc -\u003e : -\u003e w -\u003e q 를 입력하면 된다. (w는 저장, q는 나가기를 의미한다.)\n4. 로컬에서 서버 열기 hugo server -D 를 입력하고 http://localhost:1313/ 이 주소로 들어가서 내용이 잘 작성되었는지 확인하면 된다.\n D 는 draft:true인 항목 (=모든 항목)을 로컬서버에서 보여준다는 뜻이다. D 가 없다면 draft: false인 항목만 로컬서버에서 보여준다.  5. repository로 push 해주자 6. github action 통해 자동으로 배포되도록 한다. 이부분은 다음 페이지에서 다룰 예정이다. github action을 통해 배포가 되었다면 https://깃헙아이디.github.io/레포이름/ 으로 본인 페이지에 접속 할 수 있다.\n","excerpt":"0. Github에서 repository를 만든 다음 clone을 받는다. 1. hugo new site …","ref":"/blog_2/hugo/hugo1/","title":"Hugo 블로그 만들기(1): Hugo site 만들기"},{"body":"역시 헷갈릴땐 공식문서다!\n왜 때문인지 모르는 부분이 생기면 구글에 검색부터 하고 공식문서는 구글을 다 본 다음에야 온다..\n앞으로는 공식문서 부터 맘잡고 찬찬히 들여다보자!\nHugo 디렉토리 구조\narchetypes 아키타입. hugo에서 contents를 만들때 hugo new명령을 사용하거나 직접 파일을 만든다. hugo new 명령어를 사용하면 파일에 default 되어있는 내용이 있다. archetypes에서는 default 값들을 수정할 수 있다.\n//default 내용이다. title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} draft: true  title의 value인 {{ replace .Name \"-\" \" \" | title }}는 파일명을 타이틀로 쓴다는 의미이다. draft: true 상태로 되어있는 경우, 해당 페이지는 화면에 나오지 않는다. 아직 미완성 글일 경우 이 상태를 true로 한 후 글이 완성되었을 때 false로 바꾸면 된다. 만약 draft: true인 상태로 페이지를 화면으로 보고 싶다면 hugo server -D를 사용해서 로컬서버에서 보면 된다.  //docsy theme에 맞게 내용을 바꾸어 보았다. --- title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} type: docs weight: draft: true description: \u003e --- ```cd .. ### config 구성에 관한 지시들이 JSON, YAML, TOML 파일로 저장되어있다. 환경별로 구성할 수 있다. #### Mark up [기본구성](https://gohugo.io/getting-started/configuration-markup#blackfriday) 공식문서에 나와있는 코드를 거의 다 넣었다.. - Gold Mark hugo에서 사용하는 기본 markdown 라이브러리. 빠르다는 장점이 있다. - Black Friday Hugo의 기본 Markdown 렌더링 엔진으로 이제 Goldmark로 대체되었다. 하지만 현재도 사용 가능하다. - Highlight 구문강조 - tableComtents 목차. Goldmark 랜더러에서만 작동한다. ### content 사이트의 모든 컨텐츠가 있는 디렉토리이다. ","excerpt":"역시 헷갈릴땐 공식문서다!\n왜 때문인지 모르는 부분이 생기면 구글에 검색부터 하고 공식문서는 구글을 다 본 다음에야 온다..\n …","ref":"/blog_2/hugo/hugo4/","title":"Hugo 블로그 만들기(4) : hugo 디렉터리구조"},{"body":"Learn JavsScript\nThis is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"Learn JavsScript\nThis is a placeholder page that shows you how to use …","ref":"/blog_2/en/javascript/","title":"Learn JavaScript"},{"body":"This is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"This is a placeholder page that shows you how to use this template …","ref":"/blog_2/en/react/","title":"Learn React"},{"body":"This is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"This is a placeholder page that shows you how to use this template …","ref":"/blog_2/react/","title":"리액트_타이틀"},{"body":"This is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"This is a placeholder page that shows you how to use this template …","ref":"/blog_2/styledcomponenet/","title":"스타일드컴퍼넌트_타이틀"},{"body":"This is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"This is a placeholder page that shows you how to use this template …","ref":"/blog_2/","title":"Contents"},{"body":"This is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"This is a placeholder page that shows you how to use this template …","ref":"/blog_2/en/","title":"Contents"},{"body":"Github Action 시작하기 github action은 repository에서 발생하는 이벤트를 처리할 수 있는 인터페이스를 제공한다. repository 별로 가상 서버를 제공하는데, 이 서버를 사용하려면 해당 repository에 대한 접근권한이 있어야 한다. 접근권한을 위해 필요한 것이 github access token이다.\n1. Github Token  내 github page setting -\u003e Developer settings -\u003e Personal access tokens 에서 -\u003e Create new token 선택    토큰을 생성하면 토큰 값이 나오는데 이 값을 꼭 복사해야한다.    토큰을 사용할 repository -\u003e setting -\u003e seeret -\u003e new secret-\u003e 만든 토큰 이름, 아까 저장한 토큰 값을 적어준다.   2. Github Action 블로그 배포를 위한 github action을 작성해 보았다.\n# action 이름. 원하는대로 정하면 된다. name: hugo deploy1 # on: 뒤에오는 event가 발생하면 action이 실행된다. 아래는 master branch에 push 나 pull request가 발생하면 action이 실행되는 코드이다. 보통 그냥 두면 된다. on: push: branches: [ master ] pull_request: branches: [ master ] # jobs은 실행될 action을 포함하고 있다. jobs: build: # action은 github에서 제공하는 가상머신에서 실행되는데, runs-on은 가상머신의 환경이다. unbuntu로 되어있는 것을 그대로 두었다. runs-on: ubuntu-latest #steps는 명령어 들이다. # uses는 이미 만들어진 action을 사용하는 것, run은 명령어를 실행하는 것이다. steps: #1. 가상머신으로 checkout - uses: actions/checkout@v2 #2. theme를 submodule로 등록했는데 그것도 checkout - name: Checkout submodules shell: bash run: | auth_header=\"$(git config --local --get http.https://github.com/.extraheader)\" git submodule sync --recursive git -c \"http.extraheader=$auth_header\" -c protocol.version=2 submodule update --init --force --recursive --depth=1 # run 다음 내용들은 submodule을 최신으로 udapte한것을 가져오는 내용 + a이다. #3. npm install 사용하는 theme가 sass/scss를 사용하는 경우 node.js를 설치하고 npm install 과정이 필요하다. - name: npm install uses: actions/checkout@v2 - uses: actions/setup-node@v1 with: node-version: '12' - run: npm install #4. Hugo 설치 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 'latest' extended: true #5. build (public 폴더에 저장 된다.) - name: Build Hugo Site run: | hugo --minify # minify는 압축시키는 것을 의미한다. #6.Deploy 배포: git token이 필요하다. gh-pages로 publish하는 것 잊지 말자 #public 폴더를 github page의 gh-pages 브챈치에 배포한다는 의미이다. - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.HUGO_TOKEN }} publish_branch: gh-pages publish_dir: ./public ","excerpt":"Github Action 시작하기 github action은 repository에서 발생하는 이벤트를 처리할 수 있는 인터페이 …","ref":"/blog_2/hugo/hugo3_gitaction/","title":"3. Github Action으로 블로그 자동 배포하기"},{"body":"이전 포스트에서 테마를 기본테마인 ananke로 만들었다면 배포된 블로그를 볼 수 있을 것이다. 하지만 다른 theme를 사용한 경우라면 page가 생각한대로 나오지 않을 수 도 있고, 심지어는 페이지 자체가 나오지 않을 수 도 있다. 테마가 다른 경우는 각 테마의 설명을 보고 커스터마이징을 해야한다. 나의 경우 docsy 테마를 사용하였다.\n1. Docsy 테마 설치하기 참고로 나의 경우 테마의 css를 변경할 것이기 때문에 theme github 주소를 그대로 clone 받지 않고 github 주소를 folk한 후 사용했다. 설치 방법은 Docsy사이트를 참조하였다.\n1) PostCSS 설치 PostCSS를 설치하기 위해서 Node.js가 설치되어 있어야 한다. 전역으로 설치 한 경우 PostCSS5.0.1 이상 버전은 로드되지 않기 때문에 로컬 설치를 사용해야한다. (autoprefixer 설치)\nsudo npm install -D --save autoprefixer sudo npm install -D --save postcss-cli  PostCss 설치시 발생 에러: Package.json 나의 경우 This utility will walk you through creating a package.json file. 라는 에러가 계속 발생했다. Package.json 파일을 만들어 주지 않았기 때문이다.  git init 코드를 친 후 프로젝트 내용에 대해 적어주자. 잘 모르겠으면 git init 후 엔터를 연달아 치면 package.json 파일이 만들어져 있는걸 볼 수 있다.\npackage.json이 설치 된 후에 다시 PostCss 설치를 하니 잘 작동했다.\n2) Docsy 테마 서브모듈로 추가 앞 포스팅과 내용이 같다. hugo site 제작 hugo new site 폴더명 -\u003e 만든 디렉토리로 이동 cd 폴더명 -\u003e git 초기화 git init -\u003e 서브모듈추가 git submodule add 깃헙주소 themes/테마이름 -\u003e config.toml 파일에 테마 추가 echo 'theme = \"테마이름\"' \u003e\u003e config.toml -\u003e 로컬로 구축시 필요한 코드 작성git submodule update --init --recursive\n정리하면 아래와 같다.\nhugo new site ceres_blog cd ceres_blog git init git submodule add 깃헙주소 themes/docsy echo 'theme = \"docsy\"' \u003e\u003e config.toml git submodule update --init --recursive 여기까지 한 후 hugo server로 로컬페이지를 보면 화면이 나오지 않는 경우도 있다. 이때는 npm install을 해주면 된다. docsy theme가 scss를 사용하기 때문에 npm install을 해야 작동이 된다.\n2. Docsy 테마 기능 다양한 기능은 DocsyDocument 에서 확인 가능하다. 참고해서 사용하고 싶은 기능을 사용하면 된다. 이 포스팅에서는 내가 추가한 기능만 정리해 두었다.\n1) 다양한 언어 지원 Docsy 테마는 다양한 언어를 지원해준다. default 언어를 정하고 그 외의 다양한 언어를 추가할 수 있다.\n3. Docsy 테마 CSS 변경 theme 폴더를 건드리지 않는다. root 폴더에 theme 폴더에 있는 scss를 옮겨주고 root 폴더 내에서 조정하면 된다.\n 추가할 내용 css가 안보이는 오류 : npm install  ","excerpt":"이전 포스트에서 테마를 기본테마인 ananke로 만들었다면 배포된 블로그를 볼 수 있을 것이다. 하지만 다른 theme를 사용 …","ref":"/blog_2/hugo/hugo2_docsytheme/","title":"2. Docsy 테마 사용하기"},{"body":" Install Hugo https://gohugo.io/getting-started/installing Create Hugo Site https://gohugo.io/getting-started/quick-start/ Directory Structure https://gohugo.io/getting-started/directory-structure/  Why Hugo? Hugo 블로그 만들기 Hugo 공식문서의 Quick Start를 참조하였다.\n1. Hugo 설치하기 사용하는 OS 마다 설치 코드가 다르다. 설치는 이곳을 참조하였다.\n// ubutu 환경 sudo apt-get install hugo 설치 후에는 설치가 잘 되어있는지 확인한다. 아래의 코드를 입력했을 때 version 정보가 나오면 설치가 된 것이다.\nhugo version (Mac은 brew install hugo 명령어로 설치하면 된다. 당연히 brew가 미리 설치되어있어야 한다.)\n2. github repository 생성 github에서 repository를 생성하고 clone을 받는다.\ngit clone 깃헙주소 클론을 받지 않고 hugo site를 만든 다음 해당 디렉토리에서 git remote add origin 레포지토리 주소를 입력하는 방법도 있다. 순서만 다를 뿐이다.\n3. Hugo Site 만들기 clone 받은 github repo이름은 hugo_blog, 생성할 폴더이름은 ceres_blog로 가정하겠다.\n 먼저 clone 받은 hugo_blog로 이동한다.  cd hugo_blog ceres_blog라는 폴더에 hugo site를 제작한다.  hugo new site ceres_blog site가 만들어지면 아래와 같은 congratulations 메세지를 볼 수 있다.\n4. 테마 받기 테마는 https://themes.gohugo.io/ 여기서 고르면 된다. 각 테마마다 설치방법이 약간씩 다를 수 있다. 각 테마의 github page나 공식문서를 참조하길 바란다.\n나는 Docsy 테마를 선택했다. hugo 공식사이트에 예로 나오는 테마는 ananke 이다. 만약 hugo 사이트를 처음 만들어 본다면 이 테마로 우선 만들어보는 것이 좋다.\n  hugo site 디렉토리로 이동 cd ceres_blog\n  git 초기화 git init\n  선택한 hugo 테마 github 주소 복사\n테마의 css를 수정하고 싶다면 테마의 github 주소를 folk한 다음 folk 한 주소를 사용해야한다.\n  submodule에 테마 추가 git submodule add 깃헙주소 themes/테마이름\n  config.toml 파일에 테마 내용 추가 theme = \"테마이름\"' \u003e\u003e config.toml\n  로컬로 구축시 필요한 코드 추가 git submodule update --init --recursive\n  코드를 정리하면 아래와 같다.\ncd ceres_blog git init git submodule add https://github.com/ceres1105/docsy.git themes/ananke echo 'theme = \"ananke\"' \u003e\u003e config.toml git submodule update --init --recursive 5. Contents 만들기 hugo new 폴더이름/파일이름.md  명령어를 적으면 content 폴더 하위에 폴더가 생성되고 그 하위에 파일이 생성된다. 이 코드는 config.toml이 있는 root directory에서 입력해야 한다. 여기에선 cd ceres_blog 상태에서 작성하면 된다.\n아래 코드를 작성하면 content 폴더안에\u003e ko 폴더가 생성된고\u003e 그 안에 Hugo 폴더\u003e 그 안에 start_hugo 라는 md 파일이 생성된다. 만약 ko, Hugo 폴더가 있다면 start_hugo 파일만 생성된다.\nhugo new ko/Hugo/start_hugo.md 만들어진 폴더에 들어가면 나오는 default 내용이다. 제목, 날짜 등으로 본문내용에는 나오지 않는다. 이 뒤부터 마크다운으로 내용을 작성하면 된다.\n--- title: \"start_hugo\" date: 2019-03-26T08:47:11+01:00 draft: true --- title은 제목, date는 날짜이다. draft는 surver를 연결했을때 화면에서 보여주는 것을 결정한다. draft:true 인 경우 서버를 켜도 해당 페이지는 보이지 않는다. 미완성인 페이지나 보여주고 싶지 않은 페이지는 이 코드를 넣으면 된다.   content default 값을 바꾸는 방법: archetypes\nroot directory 안 (ceres_blog 폴더 내부)\u003e archetypes 폴더에 \u003e default.md 파일이 있다.\n그곳에다 hugo new 폴더이름/파일이름 명령어를 작성했을때 만들어지는 default 내용을 설정할 수 있다.\n만약 archetype 폴더나 default.md 파일이 없다면 똑같은 이름으로 만들어주면 된다.\n  인덱스 페이지: _index\n각 디렉토리의 index 페이지를 만들어 줄 수 있다. 사진과 같이 content가 나오는 것이 아니라 하위 디렉토리가 나오는 페이지이다. 이페이지를 만드려면 각 디렉토리에 _index.md파일을 만들면 된다.\n  ","excerpt":" Install Hugo https://gohugo.io/getting-started/installing Create Hugo …","ref":"/blog_2/hugo/hugo1_start/","title":"1. ubuntu 환경에서 Hugo 시작하기"},{"body":"왜 github action 에서 npm install 과정이 있는 걸까?! git action 엄청 편리한 것 같은데 어서 익숙해졌으면 좋겠다.\n아니 왜 push를 하면 everything up-to-date라고 뜨는지 이해가 안가네 변화가 발생했는데 저 코드만 뜨고 push가 진행이 되지 않는다.\naction을 바꾸었다. 이제는 될 때가 됐다….!\n","excerpt":"왜 github action 에서 npm install 과정이 있는 걸까?! git action 엄청 편리한 것 같은데 어서  …","ref":"/blog_2/react/second_page/","title":"Second_page"},{"body":"Hugo 사용법  Install hugo Create github repo -\u003e clone Create new site hugo new site 만들폴더이름 Theme 설정  git init git submodule add 테마깃헙주소 themes/테마이름 echo ‘theme = “테마이름”’ » config.toml   New post 작성  hugo new posts/포스트제목.md   hugo server 열기 hugo server -D  ","excerpt":"Hugo 사용법  Install hugo Create github repo -\u003e clone Create new site …","ref":"/blog_2/react/first-post/","title":"First Post"},{"body":"","excerpt":"","ref":"/blog_2/en/index.json","title":""},{"body":"","excerpt":"","ref":"/blog_2/index.json","title":""},{"body":"","excerpt":"","ref":"/blog_2/categories/","title":"Categories"},{"body":"","excerpt":"","ref":"/blog_2/tags/","title":"Tags"}]